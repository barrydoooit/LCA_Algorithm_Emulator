package RMQ;

import java.util.Arrays;

public class RMQsolver {
    private int[] rawArray;
    private int[] blockRmqResults;
    private int[] blockRmqIndexes;
    private int[][] blockRmqResultsRmqTable;
    private int[][][] normalizedRmqTables;
    private int blockSize;
    private int blockNum;
    private int[] blockPMCode;
    private int[] sampleSequence;
    public RMQsolver(int[] rawArray){
        this.rawArray= Arrays.copyOf(rawArray, rawArray.length);
        blockSize=binlog(rawArray.length)/2;
        blockNum=rawArray.length/blockSize;
        sampleSequence=new int[blockSize];
        createBlockRmq();
    }
    private int[][] genLogQueryTable(int[] data){
        return genLogQueryTable(data, 0, data.length);
    }
    private int[][] genLogQueryTable(int start, int end) {
        return genLogQueryTable(rawArray, start, end);
    }
    private int[][] genLogQueryTable(int[] data, int start, int end) {//end is an exclusive index
        int blockLength= end-start;
        int logBlockLength=binlog(blockLength);
        int[][] queryTable = new int[blockLength-1][logBlockLength];
        for(int i=0; i<blockLength-1; i++)
            queryTable[i][0]= (data[start+i]<= data[start+i+1])?i:i+1;
        for(int j=1; j < logBlockLength;j++)
            for(int i=0; i<blockLength-1; i++){
                if((start+i + (int) Math.pow(2, j+1))>end)
                    break;
                queryTable[i][j] =  data[start+queryTable[i][j - 1]] <=  data[start+queryTable[i + (int) Math.pow(2, j)][j - 1]] ?
                        queryTable[i][j - 1] : queryTable[i + (int) Math.pow(2, j)][j - 1];
            }
        return queryTable;
    }
    public void createBlockRmq(){
        blockPMCode = new int[rawArray.length%blockSize>0?blockNum+1:blockNum];
        for(int i=0; i<blockNum;i++) {
            for (int j = 0; j < blockSize - 1; j++) {
                blockPMCode[i] = rawArray[blockSize * i + j] < rawArray[blockSize * i + j + 1] ?
                        blockPMCode[i] * 2 + 1 : blockPMCode[i] * 2;
            }
        }

        if(blockPMCode.length>blockNum){//if there's a smaller block at last
            blockPMCode[blockPMCode.length-1]=(int)Math.pow(2, blockSize-1);
            normalizedRmqTables =new int[(int)Math.pow(2,blockSize-1)+1][][];
            for(int i = 0; i< normalizedRmqTables.length-1; i++){
                genNormalizedRmqTable(i);
            }
            normalizedRmqTables[normalizedRmqTables.length-1]=genLogQueryTable(blockNum*blockSize, rawArray.length);
        }else {
            normalizedRmqTables = new int[(int) Math.pow(2, blockSize-1)][][];
            for (int i = 0; i < normalizedRmqTables.length; i++) {
                genNormalizedRmqTable(i);
            }
        }
        blockRmqIndexes=new int[blockPMCode.length];
        blockRmqResults=new int[blockPMCode.length];
        for(int i=0;i<blockPMCode.length;i++){
            blockRmqIndexes[i]=queryLogQueryTable(blockSize*i, normalizedRmqTables[blockPMCode[i]]);
            blockRmqResults[i]=rawArray[blockRmqIndexes[i]];
        }
        blockRmqResultsRmqTable=genLogQueryTable(blockRmqResults);
    }

    private void genNormalizedRmqTable(int tableNum){
        int sampleSequenceIndex=1;
        for (int i = blockSize-2; i >=0; i--) {
            sampleSequence[sampleSequenceIndex]=sampleSequence[sampleSequenceIndex-1]+
                    (((tableNum >> i) & 1) != 0?1:-1);
            sampleSequenceIndex++;
        }
        normalizedRmqTables[tableNum]=genLogQueryTable(sampleSequence);
    }
    private  int queryLogQueryTable( int blockStart, int[][] table) {
        return queryLogQueryTable(rawArray, blockStart, table, 0, table.length);
    }
    private  int queryLogQueryTable(int blockStart, int[][] table, int start, int end) {
        return queryLogQueryTable(rawArray, blockStart, table, start, end);
    }

    private int queryLogQueryTable(int[] data, int blockStart, int[][] table, int start, int end){//this end is INCLUSIVE
        if(start==end){
            return blockStart+start;
        }
        /*int logBlockLength=binlog(end-start+1);
        int firstMinIndex=table[start][logBlockLength-1];
        int secondMinIndex=table[end-(int)Math.pow(2, logBlockLength)+1][logBlockLength-1];
        int result=1;
        for(int i=0;i<logBlockLength;i++)
            result*=2;
        if(result!=(int)Math.pow(2, logBlockLength))
            throw new RuntimeException("Double problem");
        return data[blockStart+firstMinIndex]<data[blockStart+secondMinIndex]?
                    blockStart+firstMinIndex:blockStart+secondMinIndex;*/
       int logBlockLength=binlog(end-start+1);
        int firstMinIndex=table[start][logBlockLength-1];
        if(Math.abs(Math.pow(2, logBlockLength)-(end-start+1))<0.001) {
            return blockStart + firstMinIndex;
        }else{
            int logSecondBlockLength=binlog(end-(start+(int)Math.pow(2,logBlockLength))+1)+1;
            int secondMinIndex=table[end-(int)Math.pow(2, logSecondBlockLength)+1][logSecondBlockLength-1];

            return data[blockStart+firstMinIndex]<data[blockStart+secondMinIndex]?
                    blockStart+firstMinIndex:blockStart+secondMinIndex;
        }
    }

    public int RMQ(int i, int j){
        if(i==j)
            return i;
        int low, high;
        if(i>j){
            low=j;high=i;
        }else{
            low=i;high=j;
        }
        int firstBlock=low/blockSize;
        int secondBlock=high/blockSize;
        int firstBlockStartIndex=firstBlock*blockSize;
        if(firstBlock==secondBlock){
            return queryLogQueryTable(firstBlockStartIndex, normalizedRmqTables[blockPMCode[firstBlock]], low-firstBlockStartIndex, high-firstBlockStartIndex);
        }else {
            int secondBlockStartIndex=secondBlock*blockSize;
            int lowIndex=queryLogQueryTable(firstBlockStartIndex,
                    normalizedRmqTables[blockPMCode[firstBlock]],
                    low-firstBlockStartIndex,
                    (firstBlock+1)*blockSize-1-firstBlockStartIndex);
            int highIndex=queryLogQueryTable(secondBlockStartIndex,
                    normalizedRmqTables[blockPMCode[secondBlock]],
                    0,
                    high-secondBlockStartIndex);
            if(firstBlock+1==secondBlock){
                return rawArray[lowIndex]<rawArray[highIndex]?lowIndex:highIndex;
            }else{
                int middleIndex = queryLogQueryTable(blockRmqResults,
                        0,
                        blockRmqResultsRmqTable,
                        firstBlock+1,
                        secondBlock-1);
                middleIndex=blockRmqIndexes[middleIndex];

                if(rawArray[lowIndex]<rawArray[highIndex]){
                    if(rawArray[lowIndex]<rawArray[middleIndex]){
                        return lowIndex;
                    }else
                        return middleIndex;
                }else{
                    if(rawArray[highIndex]<rawArray[middleIndex]){
                        return highIndex;
                    }else
                        return middleIndex;
                }
            }
        }
    }
    //By @x4u from https://stackoverflow.com/questions/3305059/how-do-you-calculate-log-base-2-in-java-for-integers
    private static int binlog( int bits )  {// returns 0 for bits=0
        int log = 0;
        if( ( bits & 0xffff0000 ) != 0 ) { bits >>>= 16; log = 16; }
        if( bits >= 256 ) { bits >>>= 8; log += 8; }
        if( bits >= 16  ) { bits >>>= 4; log += 4; }
        if( bits >= 4   ) { bits >>>= 2; log += 2; }
        return log + ( bits >>> 1 );
    }
    public static void main(String[] args){
        int[] testData = {0, 1, 0, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 4, 5, 4, 5, 4, 5, 6, 5, 4, 5, 6, 7, 8, 9, 10, 9, 8, 9, 10, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 9, 8, 9, 10, 11, 12, 11, 12, 13, 12, 13, 14, 13, 14, 15, 16, 15, 16, 15, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 16, 15, 14, 13, 12, 11, 12, 13, 14, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 19, 18, 19, 20, 19, 20, 21, 20, 21, 22, 21, 22, 21, 22, 23, 24, 25, 24, 25, 26, 25, 26, 27, 28, 29, 28, 27, 26, 25, 24, 23, 22, 23, 24, 25, 24, 25, 24, 25, 26, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 30, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 15, 16, 17, 16, 15, 16, 17, 16, 15, 16, 17, 18, 17, 18, 19, 20, 21, 20, 21, 22, 23, 22, 21, 20, 19, 18, 17, 16, 17, 18, 19, 20, 19, 18, 19, 20, 21, 22, 23, 22, 21, 22, 23, 22, 23, 24, 25, 26, 27, 26, 27, 28, 29, 28, 27, 28, 29, 30, 29, 28, 27, 26, 25, 24, 23, 24, 25, 26, 25, 24, 25, 26, 25, 24, 25, 26, 27, 28, 29, 28, 29, 28, 29, 30, 31, 32, 31, 32, 33, 32, 31, 30, 31, 32, 33, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 26, 27, 28, 27, 26, 25, 26, 27, 28, 29, 28, 29, 30, 31, 30, 31, 32, 33, 32, 33, 34, 35, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 27, 28, 29, 30, 29, 30, 31, 32, 33, 32, 31, 30, 29, 28, 29, 30, 31, 32, 33, 32, 31, 30, 29, 30, 29, 28, 27, 26, 25, 26, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 17, 18, 19, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 27, 26, 25, 26, 27, 28, 29, 28, 27, 28, 29, 28, 29, 30, 29, 30, 31, 30, 31, 32, 33, 34, 35, 34, 35, 36, 37, 36, 35, 36, 35, 34, 33, 32, 31, 30, 29, 30, 29, 28, 27, 26, 25, 24, 23, 22, 23, 24, 25, 26, 27, 26, 25, 24, 23, 22, 21, 20, 21, 22, 23, 22, 23, 24, 23, 22, 23, 24, 25, 26, 25, 24, 25, 26, 25, 26, 25, 26, 25, 26, 27, 28, 27, 26, 27, 28, 29, 30, 29, 28, 29, 30, 29, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 32, 31, 30, 29, 28, 29, 30, 31, 32, 33, 32, 33, 34, 35, 36, 37, 36, 35, 34, 33, 32, 31, 30, 31, 32, 33, 34, 33, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 36, 37, 36, 35, 34, 35, 36, 35, 36, 37, 36, 37, 38, 37, 38, 39, 40, 39, 38, 39, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 21, 22, 23, 24, 23, 22, 21, 22, 23, 24, 23, 24, 25, 24, 23, 24, 25, 26, 27, 26, 25, 26, 27, 28, 29, 30, 29, 30, 31, 30, 29, 30, 31, 32, 33, 34, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 27, 28, 29, 28, 29, 30, 31, 30, 31, 30, 31, 32, 33, 34, 33, 32, 31, 32, 33, 34, 35, 34, 35, 36, 37, 38, 37, 36, 37, 38, 39, 38, 39, 38, 39, 40, 41, 40, 41, 42, 43, 44, 43, 44, 45, 44, 43, 42, 43, 44, 43, 44, 43, 44, 43, 42, 41, 40, 41, 42, 41, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 27, 28, 27, 28, 29, 28, 29, 28, 29, 28, 27, 28, 29, 30, 29, 30, 31, 32, 33, 34, 33, 34, 33, 34, 33, 32, 31, 32, 33, 34, 33, 34, 35, 34, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 36, 35, 34, 35, 36, 35, 36, 37, 36, 37, 38, 37, 38, 39, 40, 41, 42, 43, 42, 41, 42, 43, 44, 43, 44, 45, 46, 47, 46, 47, 46, 45, 44, 43, 44, 45, 44, 45, 46, 45, 44, 45, 46, 45, 46, 45, 46, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 38, 39, 40, 41, 40, 41, 40, 41, 42, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 35, 36, 37, 36, 35, 36, 37, 36, 37, 36, 35, 36, 37, 38, 39, 38, 37, 38, 39, 40, 41, 40, 39, 38, 39, 40, 39, 38, 39, 40, 41, 40, 39, 38, 39, 40, 39, 40, 39, 38, 39, 40, 41, 40, 41, 42, 41, 42, 43, 44, 43, 42, 41, 40, 41, 42, 43, 44, 43, 42, 43, 42, 43, 44, 45, 46, 45, 46, 47, 46, 47, 48, 49, 50, 49, 50, 51, 52, 53, 54, 55, 54, 55, 56, 55, 56, 55, 54, 55, 56, 55, 56, 57, 58, 57, 58, 57, 56, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 39, 40, 39, 40, 41, 40, 41, 42, 43, 44, 45, 44, 43, 42, 43, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 31, 32, 33, 32, 33, 34, 33, 32, 33, 34, 35, 34, 33, 34, 35, 34, 33, 32, 31, 32, 33, 34, 35, 34, 33, 34, 35, 36, 35, 36, 37, 36, 37, 36, 35, 34, 35, 36, 35, 36, 37, 38, 37, 36, 37, 36, 37, 38, 37, 36, 35, 36, 37, 38, 37, 36, 37, 36, 35, 34, 33, 32, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
                RMQsolver rmQsolver=new RMQsolver(testData);
        System.out.println(rmQsolver.RMQ(421, 425));
    }
    //TEST DATA: an list of nodes in Euler tour with nodes' levels
    //0, 253, 0, 66, 424, 446, 424, 508, 424, 66, 337, 396, 337, 344, 303, 39, 303, 344, 487, 344, 337, 500, 234, 171, 234, 231, 234, 516, 433, 516, 234, 372, 183, 15, 375, 416, 263, 416, 375, 474, 492, 156, 492, 474, 375, 15, 183, 383, 131, 477, 515, 477, 131, 421, 70, 247, 188, 247, 439, 261, 439, 297, 142, 297, 278, 223, 99, 223, 285, 223, 278, 297, 48, 226, 141, 226, 30, 322, 195, 322, 30, 226, 48, 297, 439, 247, 400, 432, 307, 432, 463, 432, 132, 348, 117, 348, 256, 411, 242, 61, 242, 149, 246, 149, 83, 328, 83, 425, 11, 425, 158, 425, 505, 309, 109, 403, 109, 331, 52, 331, 437, 212, 204, 32, 204, 212, 437, 331, 109, 309, 505, 430, 384, 72, 384, 283, 384, 397, 367, 397, 384, 382, 198, 269, 207, 427, 207, 513, 341, 120, 341, 358, 341, 513, 207, 269, 198, 382, 384, 430, 505, 425, 83, 149, 242, 411, 256, 348, 132, 23, 12, 135, 12, 23, 222, 118, 222, 23, 143, 115, 255, 115, 190, 506, 491, 65, 491, 153, 26, 64, 26, 153, 491, 506, 190, 115, 143, 329, 464, 29, 209, 29, 464, 161, 296, 108, 393, 27, 393, 108, 387, 308, 387, 145, 466, 354, 488, 257, 488, 3, 139, 292, 139, 3, 402, 127, 54, 127, 402, 3, 488, 354, 466, 145, 123, 63, 85, 63, 123, 150, 251, 150, 123, 129, 69, 13, 51, 167, 51, 423, 51, 390, 270, 426, 164, 426, 395, 465, 395, 426, 270, 469, 310, 436, 24, 436, 310, 469, 270, 390, 51, 13, 69, 129, 449, 470, 10, 470, 449, 129, 250, 230, 473, 126, 473, 240, 176, 455, 176, 228, 496, 340, 496, 368, 229, 193, 379, 193, 229, 368, 496, 228, 176, 240, 473, 230, 250, 490, 50, 482, 84, 482, 323, 75, 268, 82, 268, 75, 323, 482, 50, 174, 259, 398, 369, 178, 369, 398, 259, 174, 512, 174, 50, 490, 250, 129, 312, 514, 312, 129, 123, 145, 387, 108, 296, 161, 464, 329, 143, 407, 233, 189, 233, 79, 279, 420, 14, 94, 58, 294, 147, 373, 102, 373, 147, 294, 281, 399, 316, 77, 316, 399, 105, 38, 105, 202, 2, 202, 260, 332, 260, 192, 405, 374, 302, 16, 302, 21, 151, 300, 151, 21, 301, 21, 302, 374, 405, 192, 260, 202, 414, 202, 105, 399, 281, 294, 58, 94, 14, 342, 510, 86, 266, 134, 266, 86, 510, 342, 14, 420, 279, 277, 227, 318, 227, 1, 356, 1, 227, 511, 347, 391, 87, 391, 347, 445, 45, 445, 56, 445, 287, 445, 67, 440, 4, 440, 67, 282, 431, 104, 100, 104, 431, 418, 443, 418, 431, 377, 284, 377, 336, 485, 319, 485, 71, 483, 71, 485, 336, 377, 431, 59, 481, 225, 351, 136, 351, 381, 55, 394, 371, 20, 371, 394, 55, 381, 351, 225, 481, 380, 205, 106, 386, 106, 205, 380, 503, 191, 146, 191, 238, 114, 265, 114, 216, 43, 90, 43, 216, 324, 216, 114, 238, 305, 457, 305, 412, 480, 412, 273, 370, 273, 494, 459, 160, 459, 494, 499, 173, 499, 494, 273, 412, 305, 238, 191, 503, 380, 481, 59, 431, 282, 67, 445, 347, 511, 227, 277, 279, 199, 159, 93, 103, 93, 159, 199, 333, 392, 236, 392, 447, 365, 447, 392, 169, 274, 327, 119, 327, 274, 111, 409, 95, 442, 88, 442, 314, 163, 314, 442, 401, 96, 73, 44, 489, 408, 489, 44, 73, 96, 401, 442, 95, 409, 111, 40, 128, 366, 128, 25, 165, 33, 165, 275, 165, 249, 162, 502, 321, 502, 162, 249, 182, 62, 267, 148, 267, 92, 144, 345, 311, 345, 144, 137, 213, 254, 213, 454, 213, 350, 507, 237, 507, 121, 187, 219, 116, 219, 362, 343, 362, 219, 187, 295, 78, 295, 133, 295, 429, 295, 187, 121, 507, 493, 276, 493, 428, 493, 507, 350, 213, 137, 144, 92, 267, 62, 182, 249, 165, 25, 128, 40, 111, 101, 452, 101, 410, 81, 410, 320, 410, 509, 410, 101, 385, 140, 389, 140, 388, 286, 355, 417, 49, 417, 197, 417, 353, 417, 355, 286, 194, 438, 22, 438, 107, 315, 107, 438, 497, 438, 210, 235, 252, 235, 338, 31, 170, 31, 338, 235, 210, 357, 217, 357, 298, 245, 298, 262, 97, 262, 288, 68, 53, 138, 317, 462, 317, 138, 155, 484, 290, 484, 325, 456, 130, 264, 130, 361, 130, 456, 325, 484, 360, 80, 360, 35, 461, 35, 360, 201, 293, 201, 471, 201, 152, 478, 152, 201, 360, 484, 155, 138, 53, 68, 288, 262, 339, 184, 364, 378, 364, 458, 364, 495, 486, 36, 486, 495, 364, 184, 339, 262, 298, 357, 210, 221, 335, 346, 335, 221, 299, 172, 299, 413, 299, 221, 450, 349, 113, 330, 113, 349, 180, 57, 200, 166, 200, 57, 180, 177, 291, 177, 180, 460, 157, 419, 157, 460, 180, 18, 76, 18, 467, 18, 180, 218, 304, 203, 304, 154, 232, 154, 208, 28, 404, 28, 208, 154, 304, 220, 74, 19, 6, 19, 74, 60, 74, 112, 359, 406, 124, 406, 434, 7, 434, 415, 334, 241, 168, 241, 181, 206, 41, 224, 9, 435, 9, 422, 243, 422, 501, 422, 9, 475, 5, 475, 98, 504, 289, 504, 468, 504, 98, 517, 98, 475, 9, 224, 41, 206, 181, 241, 334, 415, 434, 406, 359, 112, 74, 220, 304, 218, 180, 518, 186, 518, 272, 363, 272, 122, 17, 8, 125, 185, 125, 8, 17, 448, 453, 448, 17, 122, 272, 518, 180, 349, 450, 221, 210, 438, 194, 286, 388, 196, 175, 89, 175, 271, 352, 271, 175, 244, 214, 376, 214, 244, 476, 451, 476, 244, 175, 196, 211, 37, 248, 47, 248, 37, 42, 441, 215, 441, 91, 280, 91, 326, 91, 441, 42, 258, 313, 258, 472, 34, 179, 34, 472, 306, 472, 479, 46, 479, 472, 258, 110, 444, 239, 444, 110, 498, 110, 258, 42, 37, 211, 519, 211, 196, 388, 140, 385, 101, 111, 274, 169, 392, 333, 199, 279, 79, 233, 407, 143, 23, 132, 432, 400, 247, 70, 421, 131, 383, 183, 372, 234, 500, 337, 66, 0,
    // 0, 1, 0, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 4, 5, 4, 5, 4, 5, 6, 5, 4, 5, 6, 7, 8, 9, 10, 9, 8, 9, 10, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 9, 8, 9, 10, 11, 12, 11, 12, 13, 12, 13, 14, 13, 14, 15, 16, 15, 16, 15, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 16, 15, 14, 13, 12, 11, 12, 13, 14, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 19, 18, 19, 20, 19, 20, 21, 20, 21, 22, 21, 22, 21, 22, 23, 24, 25, 24, 25, 26, 25, 26, 27, 28, 29, 28, 27, 26, 25, 24, 23, 22, 23, 24, 25, 24, 25, 24, 25, 26, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 30, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 15, 16, 17, 16, 15, 16, 17, 16, 15, 16, 17, 18, 17, 18, 19, 20, 21, 20, 21, 22, 23, 22, 21, 20, 19, 18, 17, 16, 17, 18, 19, 20, 19, 18, 19, 20, 21, 22, 23, 22, 21, 22, 23, 22, 23, 24, 25, 26, 27, 26, 27, 28, 29, 28, 27, 28, 29, 30, 29, 28, 27, 26, 25, 24, 23, 24, 25, 26, 25, 24, 25, 26, 25, 24, 25, 26, 27, 28, 29, 28, 29, 28, 29, 30, 31, 32, 31, 32, 33, 32, 31, 30, 31, 32, 33, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 26, 27, 28, 27, 26, 25, 26, 27, 28, 29, 28, 29, 30, 31, 30, 31, 32, 33, 32, 33, 34, 35, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 27, 28, 29, 30, 29, 30, 31, 32, 33, 32, 31, 30, 29, 28, 29, 30, 31, 32, 33, 32, 31, 30, 29, 30, 29, 28, 27, 26, 25, 26, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 17, 18, 19, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 27, 26, 25, 26, 27, 28, 29, 28, 27, 28, 29, 28, 29, 30, 29, 30, 31, 30, 31, 32, 33, 34, 35, 34, 35, 36, 37, 36, 35, 36, 35, 34, 33, 32, 31, 30, 29, 30, 29, 28, 27, 26, 25, 24, 23, 22, 23, 24, 25, 26, 27, 26, 25, 24, 23, 22, 21, 20, 21, 22, 23, 22, 23, 24, 23, 22, 23, 24, 25, 26, 25, 24, 25, 26, 25, 26, 25, 26, 25, 26, 27, 28, 27, 26, 27, 28, 29, 30, 29, 28, 29, 30, 29, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 32, 31, 30, 29, 28, 29, 30, 31, 32, 33, 32, 33, 34, 35, 36, 37, 36, 35, 34, 33, 32, 31, 30, 31, 32, 33, 34, 33, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 36, 37, 36, 35, 34, 35, 36, 35, 36, 37, 36, 37, 38, 37, 38, 39, 40, 39, 38, 39, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 21, 22, 23, 24, 23, 22, 21, 22, 23, 24, 23, 24, 25, 24, 23, 24, 25, 26, 27, 26, 25, 26, 27, 28, 29, 30, 29, 30, 31, 30, 29, 30, 31, 32, 33, 34, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 27, 28, 29, 28, 29, 30, 31, 30, 31, 30, 31, 32, 33, 34, 33, 32, 31, 32, 33, 34, 35, 34, 35, 36, 37, 38, 37, 36, 37, 38, 39, 38, 39, 38, 39, 40, 41, 40, 41, 42, 43, 44, 43, 44, 45, 44, 43, 42, 43, 44, 43, 44, 43, 44, 43, 42, 41, 40, 41, 42, 41, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 27, 28, 27, 28, 29, 28, 29, 28, 29, 28, 27, 28, 29, 30, 29, 30, 31, 32, 33, 34, 33, 34, 33, 34, 33, 32, 31, 32, 33, 34, 33, 34, 35, 34, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 36, 35, 34, 35, 36, 35, 36, 37, 36, 37, 38, 37, 38, 39, 40, 41, 42, 43, 42, 41, 42, 43, 44, 43, 44, 45, 46, 47, 46, 47, 46, 45, 44, 43, 44, 45, 44, 45, 46, 45, 44, 45, 46, 45, 46, 45, 46, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 38, 39, 40, 41, 40, 41, 40, 41, 42, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 35, 36, 37, 36, 35, 36, 37, 36, 37, 36, 35, 36, 37, 38, 39, 38, 37, 38, 39, 40, 41, 40, 39, 38, 39, 40, 39, 38, 39, 40, 41, 40, 39, 38, 39, 40, 39, 40, 39, 38, 39, 40, 41, 40, 41, 42, 41, 42, 43, 44, 43, 42, 41, 40, 41, 42, 43, 44, 43, 42, 43, 42, 43, 44, 45, 46, 45, 46, 47, 46, 47, 48, 49, 50, 49, 50, 51, 52, 53, 54, 55, 54, 55, 56, 55, 56, 55, 54, 55, 56, 55, 56, 57, 58, 57, 58, 57, 56, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 39, 40, 39, 40, 41, 40, 41, 42, 43, 44, 45, 44, 43, 42, 43, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 31, 32, 33, 32, 33, 34, 33, 32, 33, 34, 35, 34, 33, 34, 35, 34, 33, 32, 31, 32, 33, 34, 35, 34, 33, 34, 35, 36, 35, 36, 37, 36, 37, 36, 35, 34, 35, 36, 35, 36, 37, 38, 37, 36, 37, 36, 37, 38, 37, 36, 35, 36, 37, 38, 37, 36, 37, 36, 35, 34, 33, 32, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
}
